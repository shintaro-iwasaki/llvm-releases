name: Build

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    branches:
      - main

jobs:

  build:
    
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [x86_64, arm64]
        config: [release]
        py_version: ["3.9", "3.10", "3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get LLVM Hash
        id: get-llvm-hash
        run: echo "::set-output name=hash::$(git rev-parse @:./llvm-project)"

      - name: Cache LLVM Repo
        id: cache-llvm-repo
        uses: actions/cache@v2
        with:
          path: llvm-project
          key: ${{ runner.os }}-llvm-repo-${{ steps.get-llvm-hash.outputs.hash }}

      - name: Checkout LLVM
        if: steps.cache-llvm-repo.outputs.cache-hit != 'true'
        run: git submodule update --init --depth 1 llvm-project

      - name: Cache Compile
        id: cache-compile-llvm-v6
        uses: actions/cache@v2
        with:
          path: llvm_install
          key: ${{ runner.os }}-${{ matrix.arch }}-${{ matrix.py_version }}-${{ matrix.config }}-llvm-v6-build-${{ secrets.CACHE_VERSION }}-${{ steps.get-llvm-hash.outputs.hash }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py_version }}

      - name: Compile
        if: steps.cache-compile-llvm-v6.outputs.cache-hit != 'true'
        run: |
          rm -rf llvm-project/clang llvm-project/libcxx llvm-project/compiler-rt llvm-project/clang-tools-extra
          if [ x"${{ matrix.os }}" == x"ubuntu-latest" ]; then
            sudo apt update && sudo apt install -y git build-essential wget clang python3-is-python
          fi

          bash build_llvm.bash \
            -v ${{ matrix.py_version }} \
            -o llvm_install \
            -a ${{ matrix.arch }} \
            -c ${{ matrix.config }} \
            -j 4 \
            -p ${{ matrix.os }}

      - name: Tar and collect release
        run: |
          mkdir -p ${{ github.sha }}
          if [ x"${{ matrix.os }}" == x"ubuntu-latest" ]; then
            PLATFORM_NAME="linux-gnu-ubuntu-20.04"
          else
            PLATFORM_NAME="apple-darwin"
          fi
          LLVM_VER="$(python3 scripts/get_llvm_version.py llvm-project/llvm/CMakeLists.txt)"
          OUTPUT="llvm+mlir+python-${{ matrix.py_version }}-${LLVM_VER}-${{ matrix.arch }}-${PLATFORM_NAME}-${{ matrix.config }}"
          XZ_OPT='-T0 -9' tar -cJf "${OUTPUT}.tar.xz" llvm_install
          
          mv *.tar.xz ${{ github.sha }}/
          if [ x"${{ matrix.py_version }}" == x"3.11" ] && [ x"${{ matrix.config }}" == x"release" ]; then
            cp -L -R "llvm_install/bin/mlir-tblgen" "${{ github.sha }}/mlir-tblgen-${LLVM_VER}-${{ matrix.arch }}-${PLATFORM_NAME}-${{ matrix.config }}.exe"
            cp -L -R "llvm_install/bin/llvm-tblgen" "${{ github.sha }}/llvm-tblgen-${LLVM_VER}-${{ matrix.arch }}-${PLATFORM_NAME}-${{ matrix.config }}.exe"
            cp -L -R "llvm_install/bin/mlir-linalg-ods-yaml-gen" "${{ github.sha }}/mlir-linalg-ods-yaml-gen-${LLVM_VER}-${{ matrix.arch }}-${PLATFORM_NAME}-${{ matrix.config }}.exe"
            cp -L -R "llvm_install/bin/mlir-pdll" "${{ github.sha }}/mlir-pdll-${LLVM_VER}-${{ matrix.arch }}-${PLATFORM_NAME}-${{ matrix.config }}.exe"
          fi
          cp -L -R "llvm_install/python_packages/mlir_core/mlir" .

      - name: Build wheel
        if: matrix.config == 'release'
        run: |
          if [ x"${{ matrix.os }}" == x"ubuntu-latest" ]; then
            PLATFORM_NAME="manylinux2014"
          else
            PLATFORM_NAME="macosx_12_0"
          fi
          cp -L -R llvm_install/python_packages/mlir_core/mlir .
          python -m pip install wheel
          python setup.py bdist_wheel --plat-name "${PLATFORM_NAME}_${{ matrix.arch }}"
          mkdir -p ${{ github.sha }}/
          mv dist/*.whl ${{ github.sha }}/

      - name: Upload an artifact
        uses: actions/upload-artifact@v3
        if: github.event_name == 'push'
        with:
          name: build_artifact
          path: ${{ github.sha }}

  upload-tarballs:

    runs-on: ubuntu-latest

    needs: [build]

    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build_artifact
          path: ${{ github.sha }}

      - name: Set up a release page
        id: setup_release
        run: |
          FULL_LLVM_COMMIT="$(git ls-files -s llvm-project | cut -d' ' -f2)"
          curl "https://raw.githubusercontent.com/llvm/llvm-project/$FULL_LLVM_COMMIT/llvm/CMakeLists.txt" --output CMakeLists.txt
          LLVM_VER="$(python3 scripts/get_llvm_version.py CMakeLists.txt)"
          tag_name="llvm-${LLVM_VER}-${FULL_LLVM_COMMIT}"
          release_title="LLVM ${LLVM_VER} (${FULL_LLVM_COMMIT})"
          echo "LLVM ${LLVM_VER} created at $(date)" > body.md
          echo "::set-output name=tag_name::${tag_name}"
          echo "::set-output name=release_title::${release_title}"

      - name: Upload tarballs
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ github.sha }}/*.tar.xz,${{ github.sha }}/*.whl,${{ github.sha }}/*.exe"
          bodyFile: body.md
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "${{ steps.setup_release.outputs.tag_name }}"
          name: "${{ steps.setup_release.outputs.release_title }}"
          removeArtifacts: true
          allowUpdates: true
          replacesArtifacts: true

